
@inject NotifierService Notifier

@page "/counter"

<h1 style="min-height:100px;" ><span style="color: pink">Cute</span> VS. <span style="color: @newColorFromChildConponent"> Handsome</span></h1>

<div class="row justify-content-center w-100" style=" min-height:100px">
    <span class="d-block mt-3 mb-1">Child 1 : @value</span>   <RadzenSlider @bind-Value=@value TValue="int" Min="0" Max="100" Change=@(arg => OnChange(arg)) Style="width: 600px" /><span class="d-block mt-3 mb-1">Child 2 : @(100-value)</span>
</div>
<div class="row align-middle">
    <div class="col-md-5">   <ArgGuaugescale Fill="@Color.Pink.Name" ShowColorPicker="false" ShowScale="true" ScaleChanged="@ScaleChanged"></ArgGuaugescale></div>
    <div class="col-md-2"><img src="images/giphy.gif" width="120" height="120"/> </div>
    <div class="col-md-5">
     
            <ArgGuaugescale @ref="ChildRight" Fill="@newColorFromChildConponent" ShowColorPicker="true" ShowScale="false" ColorChanged="@ColorChanged"></ArgGuaugescale>


</div>
 
   
</div>



@code {
    public ArgGuaugescale ChildRight;

    int value = 50;

    string newColorFromChildConponent =  Color.CadetBlue.Name;

    protected override void OnInitialized()
    {

        Notifier.OnScaleChange += StateHasChanged;

    }


    void OnChange(dynamic value)
    {

        Notifier.SetPattern(value);
    }

    void ColorChanged(string newColor)
    {
        newColorFromChildConponent = newColor;
        StateHasChanged();
    }

    void ScaleChanged(int newScale)
    {
        value = newScale;
        ChildRight.value = 100 - value;
        StateHasChanged();
    }
}
